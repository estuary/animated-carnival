{
	"name": "animated-carnival",
	"dockerComposeFile": "docker-compose.yaml",
	"service": "develop",
	"workspaceFolder": "/workspace",
	// For feature descriptions and documentation, see:
	// https://code.visualstudio.com/docs/remote/containers#_dev-container-features-preview
	"features": {
		// Use a non-root "flow" user with sudo.
		"common": {
			"username": "flow"
		},
		// Always use latest Go.
		"golang": "latest",
		// Always use latest Rust.
		"rust": {
			"version": "latest",
			"profile": "default"
		},
		// Always use latest Node.
		"node": {
			"version": "lts"
		},
		// Enable docker-from-docker.
		"docker-from-docker": {
			"version": "latest",
			"moby": true,
			"dockerDashComposeVersion": "v1"
		}
	},
	// Set default container specific settings.json values on container create.
	"settings": {
		// Integrate the empty docker-compose database into VSCode.
		"sqltools.connections": [
			{
				"database": "flow",
				"driver": "PostgreSQL",
				"name": "Test DB",
				"password": "flow",
				"port": 5432,
				"previewLimit": 50,
				"server": "localhost",
				"username": "flow"
			}
		],
	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [
		// Toml rendering.
		"bungcip.better-toml",
		// Go language support.
		"golang.go",
		// Rust language support.
		"matklad.rust-analyzer",
		// SQL support.
		"mtxr.sqltools",
		// Driver for attached, docker compose database.
		"mtxr.sqltools-driver-pg",
		// YAML language & schema support.
		"redhat.vscode-yaml",
		// Rust debugging support.
		"vadimcn.vscode-lldb",
		// Protobuf language support.
		"zxh404.vscode-proto3",
		// Formatting support (eg, protobuf).
		"xaver.clang-format",
		// Spell checking.
		"streetsidesoftware.code-spell-checker"
	],
	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	"forwardPorts": [
		5432,
		8080,
		8081,
		9000
	],
	// Run extra environment setup required to build & test Flow.
	// We're using a base image which is compatible with our CI runner,
	// and thus use the same make target.
	"postCreateCommand": "cargo build",
	// This user matches the user that's created inside the build image.
	"remoteUser": "flow"
}
